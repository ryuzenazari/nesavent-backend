const analyticsService = require('../services/analyticsService');const { logger } = require('../utils/logger');const Event = require('../models/Event');const path = require('path');const fs = require('fs');const getEventAnalytics = async (req, res) => {  try {    const { eventId } = req.params;    const event = await Event.findById(eventId);    if (!event) {      return res.status(404).json({        success: false,        message: 'Event tidak ditemukan'      });    }    if (req.user.role !== 'admin' && event.creator.toString() !== req.userId) {      return res.status(403).json({        success: false,        message: 'Anda tidak memiliki akses ke analytics event ini'      });    }    const analytics = await analyticsService.getEventAnalytics(eventId);    res.status(200).json({      success: true,      data: analytics    });  } catch (error) {    logger.error(`Get event analytics error: ${error.message}`);    res.status(500).json({      success: false,      message: 'Gagal mengambil analytics event',      error: error.message    });  }};const getCreatorAnalytics = async (req, res) => {  try {    const { creatorId } = req.params;    if (req.user.role !== 'admin' && creatorId !== req.userId) {      return res.status(403).json({        success: false,        message: 'Anda tidak memiliki akses ke analytics creator ini'      });    }    const analytics = await analyticsService.getCreatorAnalytics(creatorId);    res.status(200).json({      success: true,      data: analytics    });  } catch (error) {    logger.error(`Get creator analytics error: ${error.message}`);    res.status(500).json({      success: false,      message: 'Gagal mengambil analytics creator',      error: error.message    });  }};const getPlatformAnalytics = async (req, res) => {  try {    if (req.user.role !== 'admin') {      return res.status(403).json({        success: false,        message: 'Hanya admin yang dapat mengakses platform analytics'      });    }    const analytics = await analyticsService.getPlatformAnalytics();    res.status(200).json({      success: true,      data: analytics    });  } catch (error) {    logger.error(`Get platform analytics error: ${error.message}`);    res.status(500).json({      success: false,      message: 'Gagal mengambil platform analytics',      error: error.message    });  }};const getEventSalesReport = async (req, res) => {  try {    const { eventId } = req.params;    const { startDate, endDate } = req.query;    const start = startDate      ? new Date(startDate)      : new Date(new Date().setMonth(new Date().getMonth() - 1));    const end = endDate ? new Date(endDate) : new Date();    if (isNaN(start.getTime()) || isNaN(end.getTime())) {      return res.status(400).json({        success: false,        message: 'Format tanggal tidak valid'      });    }    const event = await Event.findById(eventId);    if (!event) {      return res.status(404).json({        success: false,        message: 'Event tidak ditemukan'      });    }    if (req.user.role !== 'admin' && event.creator.toString() !== req.userId) {      return res.status(403).json({        success: false,        message: 'Anda tidak memiliki akses ke laporan event ini'      });    }    const report = await analyticsService.getEventSalesReport(eventId, start, end);    res.status(200).json({      success: true,      data: report    });  } catch (error) {    logger.error(`Get event sales report error: ${error.message}`);    res.status(500).json({      success: false,      message: 'Gagal mengambil laporan penjualan',      error: error.message    });  }};const getPlatformGrowthAnalysis = async (req, res) => {  try {    const { period } = req.query;    if (req.user.role !== 'admin') {      return res.status(403).json({        success: false,        message: 'Hanya admin yang dapat mengakses analisis pertumbuhan platform'      });    }    const analysis = await analyticsService.getPlatformGrowthAnalysis(period);    res.status(200).json({      success: true,      data: analysis    });  } catch (error) {    logger.error(`Get platform growth analysis error: ${error.message}`);    res.status(500).json({      success: false,      message: 'Gagal mengambil analisis pertumbuhan platform',      error: error.message    });  }};const exportEventReportToExcel = async (req, res) => {  try {    const { eventId } = req.params;    const { startDate, endDate } = req.query;    const start = startDate      ? new Date(startDate)      : new Date(new Date().setMonth(new Date().getMonth() - 1));    const end = endDate ? new Date(endDate) : new Date();    if (isNaN(start.getTime()) || isNaN(end.getTime())) {      return res.status(400).json({        success: false,        message: 'Format tanggal tidak valid'      });    }    const event = await Event.findById(eventId);    if (!event) {      return res.status(404).json({        success: false,        message: 'Event tidak ditemukan'      });    }    if (req.user.role !== 'admin' && event.creator.toString() !== req.userId) {      return res.status(403).json({        success: false,        message: 'Anda tidak memiliki akses ke laporan event ini'      });    }    const filePath = await analyticsService.exportEventReportToExcel(eventId, start, end);    res.download(filePath, `laporan-${event.title}-${Date.now()}.xlsx`, err => {      if (err) {        logger.error(`Download Excel report error: ${err.message}`);      }      fs.unlink(filePath, unlinkErr => {        if (unlinkErr) {          logger.error(`Delete Excel file error: ${unlinkErr.message}`);        }      });    });  } catch (error) {    logger.error(`Export event report to Excel error: ${error.message}`);    res.status(500).json({      success: false,      message: 'Gagal mengekspor laporan ke Excel',      error: error.message    });  }};const exportEventReportToPDF = async (req, res) => {  try {    const { eventId } = req.params;    const { startDate, endDate } = req.query;    const start = startDate      ? new Date(startDate)      : new Date(new Date().setMonth(new Date().getMonth() - 1));    const end = endDate ? new Date(endDate) : new Date();    if (isNaN(start.getTime()) || isNaN(end.getTime())) {      return res.status(400).json({        success: false,        message: 'Format tanggal tidak valid'      });    }    const event = await Event.findById(eventId);    if (!event) {      return res.status(404).json({        success: false,        message: 'Event tidak ditemukan'      });    }    if (req.user.role !== 'admin' && event.creator.toString() !== req.userId) {      return res.status(403).json({        success: false,        message: 'Anda tidak memiliki akses ke laporan event ini'      });    }    const filePath = await analyticsService.exportEventReportToPDF(eventId, start, end);    res.download(filePath, `laporan-${event.title}-${Date.now()}.pdf`, err => {      if (err) {        logger.error(`Download PDF report error: ${err.message}`);      }      fs.unlink(filePath, unlinkErr => {        if (unlinkErr) {          logger.error(`Delete PDF file error: ${unlinkErr.message}`);        }      });    });  } catch (error) {    logger.error(`Export event report to PDF error: ${error.message}`);    res.status(500).json({      success: false,      message: 'Gagal mengekspor laporan ke PDF',      error: error.message    });  }};const getEventDashboardStats = async (req, res) => {  try {    const { eventId } = req.params;    const event = await Event.findById(eventId);    if (!event) {      return res.status(404).json({        success: false,        message: 'Event tidak ditemukan'      });    }    if (req.user.role !== 'admin' && event.creator.toString() !== req.userId) {      return res.status(403).json({        success: false,        message: 'Anda tidak memiliki akses ke dashboard event ini'      });    }    const stats = await analyticsService.getEventDashboardStats(eventId);    res.status(200).json({      success: true,      data: stats    });  } catch (error) {    logger.error(`Get event dashboard stats error: ${error.message}`);    res.status(500).json({      success: false,      message: 'Gagal mengambil statistik dashboard event',      error: error.message    });  }};const getCreatorDashboardStats = async (req, res) => {  try {    const creatorId = req.userId;    const stats = await analyticsService.getCreatorDashboardStats(creatorId);    res.status(200).json({      success: true,      data: stats    });  } catch (error) {    logger.error(`Get creator dashboard stats error: ${error.message}`);    res.status(500).json({      success: false,      message: 'Gagal mengambil statistik dashboard creator',      error: error.message    });  }};const getPlatformDashboardStats = async (req, res) => {  try {    if (req.user.role !== 'admin') {      return res.status(403).json({        success: false,        message: 'Hanya admin yang dapat mengakses dashboard platform'      });    }    const stats = await analyticsService.getPlatformDashboardStats();    res.status(200).json({      success: true,      data: stats    });  } catch (error) {    logger.error(`Get platform dashboard stats error: ${error.message}`);    res.status(500).json({      success: false,      message: 'Gagal mengambil statistik dashboard platform',      error: error.message    });  }};module.exports = {  getEventAnalytics,  getCreatorAnalytics,  getPlatformAnalytics,  getEventSalesReport,  getPlatformGrowthAnalysis,  exportEventReportToExcel,  exportEventReportToPDF,  getEventDashboardStats,  getCreatorDashboardStats,  getPlatformDashboardStats};