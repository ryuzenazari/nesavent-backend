require('dotenv').config();const mongoose = require('mongoose');const bcrypt = require('bcrypt');const User = require('../models/User');const Event = require('../models/Event');const Ticket = require('../models/Ticket');const { generateTicketQR } = require('./qrCodeGenerator');const logger = require('./logger');mongoose  .connect(process.env.MONGODB_URI)  .then(() => {    logger.info('Terhubung ke MongoDB untuk seeding');    runSeed();  })  .catch(err => {    logger.error('Gagal terhubung ke MongoDB', {      error: err.message    });    process.exit(1);  });async function runSeed() {  try {    await User.deleteMany({});    await Event.deleteMany({});    await Ticket.deleteMany({});    logger.info('Database dibersihkan untuk seeding');    const admin = await createAdmin();    const creator1 = await createCreator('creator1@example.com');    const creator2 = await createCreator('creator2@example.com');    const staffCreator = await createStaffCreator();    const student1 = await createStudent('student1@unesa.ac.id');    const student2 = await createStudent('student2@unesa.ac.id');    const user1 = await createUser('user1@example.com');    const user2 = await createUser('user2@example.com');    const event1 = await createEvent(      'Festival Musik Kampus 2025',      'Festival musik tahunan kampus dengan menampilkan band-band mahasiswa terbaik',      new Date('2025-11-15'),      '18:00 - 22:00',      'Auditorium Utama UNESA',      'Musik',      'BEM UNESA',      creator1._id,      [        {          name: 'Regular',          description: 'Tiket masuk regular',          price: 50000,          quantity: 200,          benefits: ['Akses ke area festival', 'Merchandise festival']        },        {          name: 'VIP',          description: 'Tiket VIP dengan akses khusus',          price: 150000,          quantity: 50,          benefits: [            'Akses ke area festival',            'Merchandise festival',            'Meet & Greet dengan band',            'Akses area VIP'          ]        },        {          name: 'Student',          description: 'Khusus mahasiswa',          price: 25000,          quantity: 100,          benefits: ['Akses ke area festival', 'ID mahasiswa harus ditunjukkan']        }      ]    );    const event2 = await createEvent(      'Seminar Teknologi AI',      'Seminar tentang perkembangan teknologi kecerdasan buatan terkini',      new Date('2025-12-05'),      '09:00 - 15:00',      'Gedung Teknik UNESA',      'Teknologi',      'Fakultas Teknik',      creator2._id,      [        {          name: 'Basic',          description: 'Tiket masuk seminar dasar',          price: 75000,          quantity: 150,          benefits: ['Akses ke seminar', 'Sertifikat digital']        },        {          name: 'Premium',          description: 'Tiket premium dengan workshop',          price: 200000,          quantity: 50,          benefits: ['Akses ke seminar', 'Sertifikat digital', 'Workshop eksklusif', 'Makan siang']        },        {          name: 'Student',          description: 'Khusus mahasiswa',          price: 35000,          quantity: 100,          benefits: ['Akses ke seminar', 'Sertifikat digital', 'ID mahasiswa harus ditunjukkan']        }      ]    );    const event3 = await createEvent(      'Workshop Design Thinking',      'Workshop intensif tentang design thinking dan inovasi',      new Date('2025-01-10'),      '10:00 - 16:00',      'Gedung Desain UNESA',      'Workshop',      'HIMA Desain',      staffCreator._id,      [        {          name: 'Individual',          description: 'Tiket workshop per individu',          price: 100000,          quantity: 30,          benefits: ['Akses ke workshop', 'Material workshop', 'Sertifikat']        },        {          name: 'Group',          description: 'Tiket untuk kelompok (3 orang)',          price: 250000,          quantity: 10,          benefits: [            'Akses ke workshop untuk 3 orang',            'Material workshop',            'Sertifikat',            'Konsultasi khusus'          ]        },        {          name: 'Student',          description: 'Khusus mahasiswa UNESA',          price: 50000,          quantity: 20,          benefits: [            'Akses ke workshop',            'Material workshop',            'Sertifikat',            'ID mahasiswa harus ditunjukkan'          ]        }      ]    );    await createTicket(event1, user1, event1.ticketTypes[0]);    await createTicket(event2, user2, event2.ticketTypes[0]);    await createTicket(event1, student1, event1.ticketTypes[2]);    await createTicket(event2, student2, event2.ticketTypes[2]);    await createTicket(event3, user1, event3.ticketTypes[0]);    logger.info('Seeding database selesai');    process.exit(0);  } catch (error) {    logger.error('Error saat seeding database', {      error: error.message,      stack: error.stack    });    process.exit(1);  }}async function createUser(email, role = 'user') {  const salt = await bcrypt.genSalt(10);  const hashedPassword = await bcrypt.hash('password123', salt);  const user = new User({    name: email.split('@')[0],    email,    password: hashedPassword,    emailVerified: true,    role,    profileImage: null  });  await user.save();  logger.info(`User ${email} dengan role ${role} dibuat`);  return user;}async function createAdmin() {  return createUser('admin@example.com', 'admin');}async function createCreator(email) {  return createUser(email, 'creator');}async function createStaffCreator() {  return createUser('staff@example.com', 'staff_creator');}async function createStudent(email) {  return createUser(email, 'student');}async function createEvent(  title,  description,  date,  time,  location,  category,  organizer,  creatorId,  ticketTypesData) {  const totalTickets = ticketTypesData.reduce((sum, type) => sum + type.quantity, 0);  const event = new Event({    title,    description,    date,    time,    location,    category,    organizer,    createdBy: creatorId,    totalTickets,    availableTickets: totalTickets,    price: {      regular:        ticketTypesData.find(          t => t.name === 'Regular' || t.name === 'Basic' || t.name === 'Individual'        )?.price || 0,      student: ticketTypesData.find(t => t.name === 'Student')?.price || 0    }  });  const ticketTypes = ticketTypesData.map(type => ({    name: type.name,    description: type.description,    price: type.price,    quantity: type.quantity,    availableQuantity: type.quantity,    benefits: type.benefits || [],    isActive: true  }));  event.ticketTypes = ticketTypes;  await event.save();  logger.info(`Event "${title}" dibuat dengan ${ticketTypes.length} tipe tiket`);  return event;}async function createTicket(event, user, ticketType) {  try {    const ticketNumber = `TIX-${Math.floor(100000 + Math.random() * 900000)}-${Date.now()      .toString()      .slice(-6)}`;    const ticket = new Ticket({      event: event._id,      user: user._id,      ticketType: ticketType.name === 'Student' ? 'student' : 'custom',      ticketTypeId: ticketType._id,      ticketTypeName: ticketType.name,      price: ticketType.price,      quantity: 1,      ticketNumber: ticketNumber,      paymentStatus: 'paid',      paymentMethod: 'midtrans',      ticketBenefits: ticketType.benefits || []    });    const qrCodeData = await generateTicketQR(ticket._id, event._id, user._id);    ticket.qrCode = qrCodeData;    await ticket.save();    await Event.updateOne(      {        _id: event._id,        'ticketTypes._id': ticketType._id      },      {        $inc: {          'ticketTypes.$.availableQuantity': -1,          availableTickets: -1        }      }    );    logger.info(`Tiket ${ticketType.name} dibuat untuk user ${user.email} (event: ${event.title})`);    return ticket;  } catch (error) {    logger.error(`Error saat membuat tiket: ${error.message}`);    throw error;  }}process.on('unhandledRejection', err => {  logger.error('Unhandled Rejection', {    error: err.message,    stack: err.stack  });  process.exit(1);});