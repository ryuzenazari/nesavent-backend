const mongoose = require('mongoose');const refundSchema = new mongoose.Schema(  {    ticket: {      type: mongoose.Schema.Types.ObjectId,      ref: 'Ticket',      required: true    },    event: {      type: mongoose.Schema.Types.ObjectId,      ref: 'Event',      required: true    },    user: {      type: mongoose.Schema.Types.ObjectId,      ref: 'User',      required: true    },    ticketPrice: {      type: Number,      required: true    },    refundAmount: {      type: Number,      required: true    },    reason: {      type: String,      required: true    },    status: {      type: String,      enum: ['pending', 'approved', 'rejected', 'completed', 'cancelled'],      default: 'pending'    },    adminNote: {      type: String    },    processedBy: {      type: mongoose.Schema.Types.ObjectId,      ref: 'User'    },    processedAt: {      type: Date    },    paymentMethod: {      type: String,      required: true    },    bankAccount: {      bankName: String,      accountNumber: String,      accountHolder: String    },    createdAt: {      type: Date,      default: Date.now    }  },  {    timestamps: true  });refundSchema.index(  {    ticket: 1  },  {    unique: true  });refundSchema.index({  event: 1});refundSchema.index({  user: 1});refundSchema.index({  status: 1});refundSchema.index({  createdAt: 1});refundSchema.statics.calculateRefundAmount = async function (ticketId) {  const ticket = await mongoose.model('Ticket').findById(ticketId).populate('event');  if (!ticket || !ticket.event) {    throw new Error('Ticket atau event tidak ditemukan');  }  const event = ticket.event;  if (!event.refundPolicy.isEnabled) {    throw new Error('Refund tidak diaktifkan untuk event ini');  }  const now = new Date();  if (now > new Date(event.refundPolicy.allowedUntil)) {    throw new Error('Periode refund sudah berakhir');  }  return {    ticketPrice: ticket.price,    refundAmount: ticket.price  };};refundSchema.statics.isRefundAllowed = async function (ticketId) {  const ticket = await mongoose.model('Ticket').findById(ticketId).populate('event');  if (!ticket || !ticket.event) {    return false;  }  const event = ticket.event;  if (!event.refundPolicy.isEnabled) {    return false;  }  const now = new Date();  return now <= new Date(event.refundPolicy.allowedUntil);};const Refund = mongoose.model('Refund', refundSchema);module.exports = Refund;