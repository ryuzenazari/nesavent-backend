const mongoose = require('mongoose');const waitingListSchema = new mongoose.Schema(  {    event: {      type: mongoose.Schema.Types.ObjectId,      ref: 'Event',      required: true    },    user: {      type: mongoose.Schema.Types.ObjectId,      ref: 'User',      required: true    },    ticketType: {      type: String,      required: true    },    quantity: {      type: Number,      required: true,      min: 1    },    status: {      type: String,      enum: ['waiting', 'notified', 'expired', 'cancelled'],      default: 'waiting'    },    position: {      type: Number,      required: true    },    notifiedAt: {      type: Date    },    expiresAt: {      type: Date,      required: true    },    createdAt: {      type: Date,      default: Date.now    }  },  {    timestamps: true  });waitingListSchema.index(  {    event: 1,    user: 1  },  {    unique: true  });waitingListSchema.index({  event: 1,  status: 1});waitingListSchema.index(  {    expiresAt: 1  },  {    expireAfterSeconds: 0  });waitingListSchema.statics.isUserInWaitingList = async function (eventId, userId) {  const entry = await this.findOne({    event: eventId,    user: userId,    status: 'waiting'  });  return !!entry;};waitingListSchema.statics.getNextPosition = async function (eventId) {  const lastEntry = await this.findOne({    event: eventId  })    .sort({      position: -1    })    .limit(1);  return lastEntry ? lastEntry.position + 1 : 1;};const WaitingList = mongoose.model('WaitingList', waitingListSchema);module.exports = WaitingList;