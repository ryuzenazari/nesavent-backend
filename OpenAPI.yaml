openapi: 3.0.0
info:
  title: NesaVent API
  description: |
    # API Documentation untuk Platform Ticketing Event Kampus UNESA
    
    NesaVent adalah platform penjualan tiket event untuk komunitas Universitas Negeri Surabaya (UNESA).
    Dokumentasi ini mencakup semua endpoint API yang tersedia di platform NesaVent.
    
    ## Autentikasi
    Sebagian besar endpoint memerlukan autentikasi menggunakan JWT Bearer token.
    Token dapat diperoleh melalui endpoint `/auth/login` atau `/auth/google`.
    
    ## Pagination
    Endpoint yang mengembalikan daftar item umumnya mendukung pagination dengan parameter query:
    - `page`: Nomor halaman (default: 1)
    - `limit`: Jumlah item per halaman (default: 10)
    
    ## Format Response
    Semua response menggunakan format JSON dengan struktur umum:
    ```json
    {
      "success": true,
      "data": { ... },
      "message": "Success message"
    }
    ```
    
    Untuk error response:
    ```json
    {
      "success": false,
      "error": "Error message",
      "code": 400
    }
    ```
  version: 1.0.0
  contact:
    name: Tim Pengembang NesaVent
    email: support@nesavent.com

servers:
  - url: http://localhost:5000/api
    description: Development Server
  - url: https://api.nesavent.com/api
    description: Production Server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT Authorization header using the Bearer scheme
    googleAuth:
      type: oauth2
      description: Google OAuth2 authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://oauth2.googleapis.com/token
          scopes:
            email: Akses email pengguna
            profile: Akses profil pengguna

  schemas:
    # User Related Schemas
    User:
      type: object
      description: Representasi data pengguna
      properties:
        _id:
          type: string
          format: uuid
          description: ID unik pengguna
        name:
          type: string
          description: Nama lengkap pengguna
        email:
          type: string
          format: email
          description: Alamat email pengguna
        role:
          type: string
          enum: [user, student, creator, staff, admin]
          description: Peran pengguna dalam sistem
        isVerified:
          type: boolean
          description: Status verifikasi email pengguna
        studentId:
          type: string
          description: Nomor induk mahasiswa (jika role student)
        createdAt:
          type: string
          format: date-time
          description: Waktu pembuatan akun

    # Event Related Schemas
    Event:
      type: object
      description: Representasi data event
      properties:
        _id:
          type: string
          format: uuid
          description: ID unik event
        title:
          type: string
          description: Judul event
        description:
          type: string
          description: Deskripsi lengkap event
        startDate:
          type: string
          format: date-time
          description: Waktu mulai event
        endDate:
          type: string
          format: date-time
          description: Waktu berakhir event
        location:
          type: string
          description: Lokasi event
        creator:
          type: string
          format: uuid
          description: ID pembuat event
        ticketTypes:
          type: array
          description: Tipe tiket yang tersedia
          items:
            $ref: '#/components/schemas/TicketType'
        status:
          type: string
          enum: [draft, published, cancelled, completed]
          description: Status event

    TicketType:
      type: object
      description: Representasi tipe tiket
      properties:
        name:
          type: string
          description: Nama tipe tiket
        price:
          type: number
          description: Harga tiket
        quantity:
          type: integer
          description: Jumlah tiket yang tersedia
        isStudentOnly:
          type: boolean
          description: Apakah tiket hanya untuk mahasiswa
        description:
          type: string
          description: Deskripsi tipe tiket

    # Transaction Related Schemas
    Transaction:
      type: object
      description: Representasi transaksi pembelian tiket
      properties:
        _id:
          type: string
          format: uuid
          description: ID unik transaksi
        eventId:
          type: string
          format: uuid
          description: ID event terkait
        userId:
          type: string
          format: uuid
          description: ID pembeli
        ticketTypeId:
          type: string
          format: uuid
          description: ID tipe tiket
        quantity:
          type: integer
          description: Jumlah tiket yang dibeli
        totalAmount:
          type: number
          description: Total harga transaksi
        status:
          type: string
          enum: [pending, paid, cancelled, expired]
          description: Status transaksi
        paymentUrl:
          type: string
          description: URL untuk melakukan pembayaran
        createdAt:
          type: string
          format: date-time
          description: Waktu pembuatan transaksi

    Ticket:
      type: object
      description: Representasi tiket
      properties:
        _id:
          type: string
          format: uuid
          description: ID unik tiket
        eventId:
          type: string
          format: uuid
          description: ID event terkait
        userId:
          type: string
          format: uuid
          description: ID pemilik tiket
        ticketTypeId:
          type: string
          format: uuid
          description: ID tipe tiket
        status:
          type: string
          enum: [active, used, cancelled, expired]
          description: Status tiket
        qrCode:
          type: string
          description: QR Code untuk validasi tiket
        purchaseDate:
          type: string
          format: date-time
          description: Waktu pembelian tiket
        usedAt:
          type: string
          format: date-time
          description: Waktu penggunaan tiket
        price:
          type: number
          description: Harga tiket
        seatNumber:
          type: string
          description: Nomor kursi (jika ada)
        additionalInfo:
          type: object
          description: Informasi tambahan tiket

    # Payment Related Schemas
    PromoCode:
      type: object
      description: Representasi kode promo
      properties:
        code:
          type: string
          description: Kode promo yang dapat digunakan
        discount:
          type: number
          description: Nilai diskon
        discountType:
          type: string
          enum: [percentage, fixed]
          description: Tipe diskon (persentase atau nilai tetap)
        maxUsage:
          type: integer
          description: Jumlah maksimum penggunaan
        startDate:
          type: string
          format: date-time
          description: Waktu mulai berlaku
        endDate:
          type: string
          format: date-time
          description: Waktu berakhir
        applicableTickets:
          type: array
          description: Tipe tiket yang dapat menggunakan promo ini
          items:
            type: string

    Payout:
      type: object
      description: Representasi payout untuk creator
      properties:
        id:
          type: string
          format: uuid
          description: ID unik payout
        creatorId:
          type: string
          format: uuid
          description: ID creator
        amount:
          type: number
          description: Jumlah payout
        bankAccount:
          type: string
          description: Informasi rekening bank
        status:
          type: string
          enum: [pending, processed, rejected]
          description: Status payout
        createdAt:
          type: string
          format: date-time
          description: Waktu permintaan payout
        processedAt:
          type: string
          format: date-time
          description: Waktu pemrosesan payout

    # Social & Feedback Related Schemas
    Rating:
      type: object
      description: Representasi rating dan review untuk event
      properties:
        _id:
          type: string
          format: uuid
          description: ID unik rating
        eventId:
          type: string
          format: uuid
          description: ID event yang di-rating
        userId:
          type: string
          format: uuid
          description: ID user yang memberikan rating
        rating:
          type: number
          minimum: 1
          maximum: 5
          description: Nilai rating (1-5)
        review:
          type: string
          description: Ulasan/komentar untuk event
        user:
          $ref: '#/components/schemas/User'
          description: Data user yang memberikan rating
        createdAt:
          type: string
          format: date-time
          description: Waktu pembuatan rating
        updatedAt:
          type: string
          format: date-time
          description: Waktu terakhir update rating
      required:
        - eventId
        - userId
        - rating

    Comment:
      type: object
      description: Representasi komentar
      properties:
        _id:
          type: string
          format: uuid
          description: ID unik komentar
        userId:
          type: string
          format: uuid
          description: ID pengirim komentar
        eventId:
          type: string
          format: uuid
          description: ID event terkait
        content:
          type: string
          description: Isi komentar
        parentId:
          type: string
          format: uuid
          description: ID komentar induk (untuk balasan)
        likes:
          type: integer
          description: Jumlah like
        createdAt:
          type: string
          format: date-time
          description: Waktu pengiriman komentar
        updatedAt:
          type: string
          format: date-time
          description: Waktu terakhir diperbarui

    # Notification Related Schemas
    Notification:
      type: object
      description: Representasi notifikasi
      properties:
        _id:
          type: string
          format: uuid
          description: ID unik notifikasi
        userId:
          type: string
          format: uuid
          description: ID penerima notifikasi
        title:
          type: string
          description: Judul notifikasi
        message:
          type: string
          description: Isi notifikasi
        type:
          type: string
          enum: [transaction, event, system, promotion]
          description: Tipe notifikasi
        isRead:
          type: boolean
          description: Status dibaca notifikasi
        createdAt:
          type: string
          format: date-time
          description: Waktu pembuatan notifikasi
        data:
          type: object
          description: Data tambahan terkait notifikasi

    Feedback:
      type: object
      description: Representasi feedback
      properties:
        _id:
          type: string
          format: uuid
          description: ID unik feedback
        userId:
          type: string
          format: uuid
          description: ID pengirim feedback
        type:
          type: string
          enum: [bug, feature, complaint, suggestion]
          description: Tipe feedback
        message:
          type: string
          description: Isi feedback
        category:
          type: string
          description: Kategori feedback
        priority:
          type: string
          enum: [low, medium, high]
          description: Prioritas feedback
        status:
          type: string
          enum: [pending, in_progress, resolved, rejected]
          description: Status feedback
        createdAt:
          type: string
          format: date-time
          description: Waktu pengiriman feedback
        updatedAt:
          type: string
          format: date-time
          description: Waktu terakhir diperbarui

    # ShortLink Schema
    ShortLink:
      type: object
      properties:
        code:
          type: string
        originalUrl:
          type: string
        customUrl:
          type: string
        isActive:
          type: boolean
        expiresAt:
          type: string
          format: date-time
        clicks:
          type: integer
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
          format: uuid

    # ErrorLog Schema
    ErrorLog:
      type: object
      properties:
        _id:
          type: string
          format: uuid
        level:
          type: string
          enum: [error, warning, info]
        message:
          type: string
        stack:
          type: string
        timestamp:
          type: string
          format: date-time
        metadata:
          type: object

    # AbuseReport Schema
    AbuseReport:
      type: object
      properties:
        _id:
          type: string
          format: uuid
        reporterId:
          type: string
          format: uuid
        reportedContentType:
          type: string
          enum: [event, comment, user]
        reportedContentId:
          type: string
          format: uuid
        reason:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [pending, investigating, resolved, dismissed]
        notes:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        resolvedAt:
          type: string
          format: date-time
        resolvedBy:
          type: string
          format: uuid

    # Webhook Related Schemas
    WebhookEvent:
      type: object
      description: Representasi event webhook
      properties:
        id:
          type: string
          format: uuid
          description: ID unik event
        type:
          type: string
          enum: [transaction.created, transaction.updated, event.created, event.updated, ticket.used]
          description: Tipe event
        data:
          type: object
          description: Data event
        createdAt:
          type: string
          format: date-time
          description: Waktu event terjadi

    WebhookSubscription:
      type: object
      description: Representasi subscription webhook
      properties:
        id:
          type: string
          format: uuid
          description: ID unik subscription
        url:
          type: string
          format: uri
          description: URL endpoint webhook
        events:
          type: array
          items:
            type: string
          description: Tipe event yang di-subscribe
        secret:
          type: string
          description: Secret untuk verifikasi signature
        isActive:
          type: boolean
          description: Status aktif subscription
        createdAt:
          type: string
          format: date-time
          description: Waktu subscription dibuat

    # WebSocket Related Schemas
    WebSocketMessage:
      type: object
      description: Format pesan WebSocket
      properties:
        type:
          type: string
          enum: [notification, event_update, ticket_status]
          description: Tipe pesan
        data:
          type: object
          description: Data pesan
        timestamp:
          type: string
          format: date-time
          description: Waktu pesan dikirim

    # File Upload Related Schemas
    FileUpload:
      type: object
      description: Representasi file yang diupload
      properties:
        id:
          type: string
          format: uuid
          description: ID unik file
        filename:
          type: string
          description: Nama file
        mimeType:
          type: string
          description: Tipe MIME file
        size:
          type: integer
          description: Ukuran file dalam bytes
        url:
          type: string
          format: uri
          description: URL untuk mengakses file
        createdAt:
          type: string
          format: date-time
          description: Waktu file diupload

    # Analytics Related Schemas
    AnalyticsData:
      type: object
      description: Representasi data analytics
      properties:
        period:
          type: string
          enum: [daily, weekly, monthly, yearly]
          description: Periode waktu data
        startDate:
          type: string
          format: date
          description: Tanggal mulai
        endDate:
          type: string
          format: date
          description: Tanggal selesai
        metrics:
          type: object
          properties:
            totalEvents:
              type: integer
              description: Total event
            totalTickets:
              type: integer
              description: Total tiket terjual
            totalRevenue:
              type: number
              description: Total pendapatan
            averageRating:
              type: number
              description: Rata-rata rating
        createdAt:
          type: string
          format: date-time
          description: Waktu data dibuat

    PaymentRequest:
      type: object
      description: Representasi permintaan pembayaran
      properties:
        id:
          type: string
          format: uuid
          description: ID permintaan pembayaran
        eventId:
          type: string
          format: uuid
          description: ID event
        creatorId:
          type: string
          format: uuid
          description: ID creator
        amount:
          type: number
          description: Jumlah pembayaran
        status:
          type: string
          enum: [pending, processing, completed, rejected]
          description: Status pembayaran
        createdAt:
          type: string
          format: date-time
          description: Waktu permintaan dibuat
        updatedAt:
          type: string
          format: date-time
          description: Waktu terakhir diperbarui

    CreatorFollow:
      type: object
      description: Representasi relasi follow creator
      properties:
        id:
          type: string
          format: uuid
          description: ID relasi follow
        followerId:
          type: string
          format: uuid
          description: ID pengguna yang follow
        creatorId:
          type: string
          format: uuid
          description: ID creator yang di-follow
        notificationsEnabled:
          type: boolean
          description: Status notifikasi untuk creator
        createdAt:
          type: string
          format: date-time
          description: Waktu follow dibuat

    Creator:
      type: object
      description: Representasi data creator
      properties:
        id:
          type: string
          format: uuid
          description: ID creator
        name:
          type: string
          description: Nama creator
        bio:
          type: string
          description: Bio creator
        profileImage:
          type: string
          format: uri
          description: URL foto profil
        followersCount:
          type: integer
          description: Jumlah followers
        eventsCount:
          type: integer
          description: Jumlah event yang dibuat
        rating:
          type: number
          description: Rata-rata rating
        isFollowing:
          type: boolean
          description: Status follow oleh user yang sedang login

  responses:
    BadRequest:
      description: Bad Request - Data yang dikirim tidak valid
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              error:
                type: string
                example: "Data tidak valid"
              code:
                type: integer
                example: 400
              details:
                type: object
                example:
                  field: "email"
                  message: "Format email tidak valid"

    Unauthorized:
      description: Unauthorized - Autentikasi diperlukan
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              error:
                type: string
                example: "Token tidak valid atau kadaluarsa"
              code:
                type: integer
                example: 401

    Forbidden:
      description: Forbidden - Tidak memiliki akses
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              error:
                type: string
                example: "Anda tidak memiliki akses untuk melakukan operasi ini"
              code:
                type: integer
                example: 403

    NotFound:
      description: Not Found - Resource tidak ditemukan
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              error:
                type: string
                example: "Resource tidak ditemukan"
              code:
                type: integer
                example: 404

    TooManyRequests:
      description: Too Many Requests - Rate limit terlampaui
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              error:
                type: string
                example: "Terlalu banyak permintaan. Silakan coba lagi dalam 1 menit"
              code:
                type: integer
                example: 429
              retryAfter:
                type: integer
                example: 60

    ServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              error:
                type: string
                example: "Terjadi kesalahan pada server"
              code:
                type: integer
                example: 500
              requestId:
                type: string
                example: "req-123456"

  examples:
    EventExample:
      value:
        _id: "123e4567-e89b-12d3-a456-426614174000"
        title: "Konser Musik Kampus"
        description: "Konser musik tahunan UNESA"
        startDate: "2024-05-01T19:00:00Z"
        endDate: "2024-05-01T22:00:00Z"
        location: "Auditorium UNESA"
        creator: "123e4567-e89b-12d3-a456-426614174001"
        ticketTypes: [
          {
            name: "Regular",
            price: 50000,
            quantity: 100,
            isStudentOnly: false,
            description: "Tiket regular"
          },
          {
            name: "VIP",
            price: 100000,
            quantity: 50,
            isStudentOnly: false,
            description: "Tiket VIP dengan akses backstage"
          }
        ]
        status: "published"
        createdAt: "2024-03-01T10:00:00Z"
        updatedAt: "2024-03-01T10:00:00Z"

    TransactionExample:
      value:
        _id: "123e4567-e89b-12d3-a456-426614174002"
        eventId: "123e4567-e89b-12d3-a456-426614174000"
        userId: "123e4567-e89b-12d3-a456-426614174001"
        ticketTypeId: "123e4567-e89b-12d3-a456-426614174003"
        quantity: 2
        totalAmount: 100000
        status: "pending"
        paymentUrl: "https://payment.nesavent.com/pay/123456"
        createdAt: "2024-03-01T11:00:00Z"

    PaginationExample:
      value:
        data: []
        total: 100
        page: 1
        limit: 10
        totalPages: 10
        hasNext: true
        hasPrev: false

  parameters:
    page:
      name: page
      in: query
      description: Nomor halaman (dimulai dari 1)
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1
        example: 1

    limit:
      name: limit
      in: query
      description: Jumlah item per halaman
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 10
        example: 10

    search:
      name: search
      in: query
      description: Kata kunci pencarian
      required: false
      schema:
        type: string
        example: "konser"

    sort:
      name: sort
      in: query
      description: Pengurutan hasil
      required: false
      schema:
        type: string
        example: "createdAt:desc"

  x-codeSamples:
    curl:
      lang: Shell
      source: |
        curl -X GET "https://api.nesavent.com/api/events" \
          -H "Authorization: Bearer {token}" \
          -H "Content-Type: application/json"

    javascript:
      lang: JavaScript
      source: |
        const response = await fetch('https://api.nesavent.com/api/events', {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });
        const data = await response.json();

    python:
      lang: Python
      source: |
        import requests
        
        response = requests.get(
          'https://api.nesavent.com/api/events',
          headers={
            'Authorization': f'Bearer {token}',
            'Content-Type': 'application/json'
          }
        )
        data = response.json()

paths:
  # Authentication Endpoints
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register user baru
      description: Mendaftarkan pengguna baru ke sistem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                  example: "John Doe"
                email:
                  type: string
                  format: email
                  example: "john@example.com"
                password:
                  type: string
                  format: password
                  example: "password123"
      responses:
        '201':
          description: User berhasil dibuat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Data tidak valid

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      description: |
        Mendapatkan token autentikasi
        
        Rate Limit: 5 requests per menit per IP
        Validasi:
        - Email harus valid
        - Password minimal 8 karakter
        - Password harus mengandung huruf dan angka
      x-rateLimit:
        window: 60
        max: 5
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "john@example.com"
                  minLength: 5
                  maxLength: 255
                password:
                  type: string
                  format: password
                  example: "password123"
                  minLength: 8
                  maxLength: 100
                  pattern: "^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$"
      responses:
        '200':
          description: Login berhasil
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'

  /auth/google:
    get:
      tags:
        - Authentication
      summary: Login dengan Google
      description: Memulai proses autentikasi dengan Google OAuth
      security:
        - googleAuth: []
      responses:
        '200':
          description: Login berhasil
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  user:
                    $ref: '#/components/schemas/User'

  /auth/google/callback:
    get:
      tags:
        - Authentication
      summary: Callback untuk login Google
      description: Endpoint yang dipanggil oleh Google setelah autentikasi berhasil
      security:
        - googleAuth: []
      responses:
        '302':
          description: Redirect ke frontend dengan token
          headers:
            Location:
              schema:
                type: string
              description: URL redirect dengan token

  /auth/verify-email/{token}:
    get:
      tags:
        - Authentication
      summary: Verifikasi email user
      description: Memverifikasi alamat email pengguna dengan token yang dikirim via email
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
          description: Token verifikasi email
          example: "abc123def456"
      responses:
        '200':
          description: Email berhasil diverifikasi
        '400':
          description: Token tidak valid

  /auth/resend-verification:
    post:
      tags:
        - Authentication
      summary: Mengirim ulang email verifikasi
      description: Mengirim ulang email verifikasi ke alamat email pengguna
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: "john@example.com"
      responses:
        '200':
          description: Email verifikasi berhasil dikirim ulang
        '400':
          description: Email tidak ditemukan

  /auth/forgot-password:
    post:
      tags:
        - Authentication
      summary: Meminta reset password
      description: Mengirim email dengan link reset password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: "john@example.com"
      responses:
        '200':
          description: Email reset password berhasil dikirim
        '400':
          description: Email tidak ditemukan

  /auth/reset-password/{token}:
    post:
      tags:
        - Authentication
      summary: Reset password dengan token
      description: Mengubah password dengan token yang dikirim via email
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
          description: Token reset password
          example: "abc123def456"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                password:
                  type: string
                  format: password
                  example: "newPassword123"
      responses:
        '200':
          description: Password berhasil direset
        '400':
          description: Token tidak valid

  # User Profile Endpoints
  /auth/profile:
    get:
      tags:
        - Users
      summary: Mendapatkan profil user
      description: Mendapatkan informasi profil user yang sedang login
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Profil user berhasil didapatkan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Tidak terautentikasi
    
    put:
      tags:
        - Users
      summary: Update profil user
      description: Mengupdate informasi profil user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "John Smith"
                phone:
                  type: string
                  example: "081234567890"
                bio:
                  type: string
                  example: "Mahasiswa Teknik Informatika"
      responses:
        '200':
          description: Profil berhasil diupdate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Tidak terautentikasi

  # Event Endpoints
  /events:
    get:
      tags:
        - Events
      summary: Mendapatkan daftar event
      description: Mendapatkan daftar event dengan filter dan pagination
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            example: 1
          description: Nomor halaman
        - in: query
          name: limit
          schema:
            type: integer
            example: 10
          description: Jumlah item per halaman
        - in: query
          name: search
          schema:
            type: string
            example: "konser"
      responses:
        '200':
          description: Daftar event berhasil didapatkan
          content:
            application/json:
              schema:
                type: object
                properties:
                  events:
                    type: array
                    items:
                      $ref: '#/components/schemas/Event'
                  total:
                    type: integer
                    example: 50
                  page:
                    type: integer
                    example: 1
                  totalPages:
                    type: integer
                    example: 5

    post:
      tags:
        - Events
      summary: Membuat event baru
      description: |
        Membuat event baru oleh creator
        
        Rate Limit: 10 requests per jam per user
        Validasi:
        - Title minimal 5 karakter, maksimal 100 karakter
        - Description minimal 20 karakter
        - Start date harus di masa depan
        - End date harus setelah start date
        - Location tidak boleh kosong
        - Minimal 1 tipe tiket
      x-rateLimit:
        window: 3600
        max: 10
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - description
                - startDate
                - endDate
                - location
                - ticketTypes
              properties:
                title:
                  type: string
                  minLength: 5
                  maxLength: 100
                  example: "Konser Musik Kampus"
                description:
                  type: string
                  minLength: 20
                  example: "Konser musik tahunan UNESA"
                startDate:
                  type: string
                  format: date-time
                  example: "2024-05-01T19:00:00Z"
                endDate:
                  type: string
                  format: date-time
                  example: "2024-05-01T22:00:00Z"
                location:
                  type: string
                  minLength: 1
                  example: "Auditorium UNESA"
                ticketTypes:
                  type: array
                  minItems: 1
                  items:
                    $ref: '#/components/schemas/TicketType'
      responses:
        '201':
          description: Event berhasil dibuat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
              examples:
                success:
                  value:
                    $ref: '#/components/examples/EventExample'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'

  /events/{eventId}:
    get:
      tags:
        - Events
      summary: Mendapatkan detail event
      description: Mendapatkan informasi detail event berdasarkan ID
      parameters:
        - in: path
          name: eventId
          required: true
          schema:
            type: string
            format: uuid
          description: ID event
      responses:
        '200':
          description: Detail event berhasil didapatkan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          description: Event tidak ditemukan

    put:
      tags:
        - Events
      summary: Update event
      description: Mengupdate informasi event
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: eventId
          required: true
          schema:
            type: string
            format: uuid
          description: ID event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                startDate:
                  type: string
                  format: date-time
                endDate:
                  type: string
                  format: date-time
                location:
                  type: string
                ticketTypes:
                  type: array
                  items:
                    $ref: '#/components/schemas/TicketType'
      responses:
        '200':
          description: Event berhasil diupdate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '401':
          description: Tidak terautentikasi
        '403':
          description: Tidak memiliki akses
        '404':
          description: Event tidak ditemukan

    delete:
      tags:
        - Events
      summary: Hapus event
      description: Menghapus event
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: eventId
          required: true
          schema:
            type: string
            format: uuid
          description: ID event
      responses:
        '200':
          description: Event berhasil dihapus
        '401':
          description: Tidak terautentikasi
        '403':
          description: Tidak memiliki akses
        '404':
          description: Event tidak ditemukan

  # Transaction Endpoints
  /transactions:
    get:
      tags:
        - Transactions
      summary: Mendapatkan daftar transaksi
      description: Mendapatkan daftar transaksi user
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            example: 1
          description: Nomor halaman
        - in: query
          name: limit
          schema:
            type: integer
            example: 10
          description: Jumlah item per halaman
        - in: query
          name: status
          schema:
            type: string
            enum: [pending, paid, cancelled, expired]
          description: Filter berdasarkan status
      responses:
        '200':
          description: Daftar transaksi berhasil didapatkan
          content:
            application/json:
              schema:
                type: object
                properties:
                  transactions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Transaction'
                  total:
                    type: integer
                  page:
                    type: integer
                  totalPages:
                    type: integer
        '401':
          description: Tidak terautentikasi

    post:
      tags:
        - Transactions
      summary: Membuat transaksi baru
      description: |
        Membuat transaksi pembelian tiket
        
        Rate Limit: 20 requests per menit per user
        Validasi:
        - Event harus aktif
        - Tipe tiket harus tersedia
        - Quantity harus positif dan tidak melebihi stok
        - Promo code harus valid (jika ada)
      x-rateLimit:
        window: 60
        max: 20
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - eventId
                - ticketTypeId
                - quantity
              properties:
                eventId:
                  type: string
                  format: uuid
                  example: "123e4567-e89b-12d3-a456-426614174000"
                ticketTypeId:
                  type: string
                  format: uuid
                  example: "123e4567-e89b-12d3-a456-426614174001"
                quantity:
                  type: integer
                  minimum: 1
                  maximum: 10
                  example: 2
                promoCode:
                  type: string
                  example: "DISKON50"
      responses:
        '201':
          description: Transaksi berhasil dibuat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
              examples:
                success:
                  value:
                    $ref: '#/components/examples/TransactionExample'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'

  /transactions/{transactionId}:
    get:
      tags:
        - Transactions
      summary: Mendapatkan detail transaksi
      description: Mendapatkan informasi detail transaksi
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: transactionId
          required: true
          schema:
            type: string
            format: uuid
          description: ID transaksi
      responses:
        '200':
          description: Detail transaksi berhasil didapatkan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '401':
          description: Tidak terautentikasi
        '404':
          description: Transaksi tidak ditemukan

    put:
      tags:
        - Transactions
      summary: Update status transaksi
      description: Mengupdate status transaksi (hanya untuk admin)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: transactionId
          required: true
          schema:
            type: string
            format: uuid
          description: ID transaksi
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [pending, paid, cancelled, expired]
                  example: "paid"
      responses:
        '200':
          description: Status transaksi berhasil diupdate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '401':
          description: Tidak terautentikasi
        '403':
          description: Tidak memiliki akses
        '404':
          description: Transaksi tidak ditemukan

  # Ticket Endpoints
  /tickets:
    get:
      tags:
        - Tickets
      summary: Mendapatkan daftar tiket
      description: Mendapatkan daftar tiket user
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            example: 1
          description: Nomor halaman
        - in: query
          name: limit
          schema:
            type: integer
            example: 10
          description: Jumlah item per halaman
        - in: query
          name: status
          schema:
            type: string
            enum: [active, used, cancelled, expired]
          description: Filter berdasarkan status
      responses:
        '200':
          description: Daftar tiket berhasil didapatkan
          content:
            application/json:
              schema:
                type: object
                properties:
                  tickets:
                    type: array
                    items:
                      $ref: '#/components/schemas/Ticket'
                  total:
                    type: integer
                  page:
                    type: integer
                  totalPages:
                    type: integer
        '401':
          description: Tidak terautentikasi

  /tickets/{ticketId}:
    get:
      tags:
        - Tickets
      summary: Mendapatkan detail tiket
      description: Mendapatkan informasi detail tiket
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: ticketId
          required: true
          schema:
            type: string
            format: uuid
          description: ID tiket
      responses:
        '200':
          description: Detail tiket berhasil didapatkan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        '401':
          description: Tidak terautentikasi
        '404':
          description: Tiket tidak ditemukan

    put:
      tags:
        - Tickets
      summary: Update status tiket
      description: Mengupdate status tiket (untuk validasi)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: ticketId
          required: true
          schema:
            type: string
            format: uuid
          description: ID tiket
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [active, used, cancelled, expired]
                  example: "used"
      responses:
        '200':
          description: Status tiket berhasil diupdate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        '401':
          description: Tidak terautentikasi
        '403':
          description: Tidak memiliki akses
        '404':
          description: Tiket tidak ditemukan

  # Notification Endpoints
  /notifications:
    get:
      tags:
        - Notifications
      summary: Mendapatkan daftar notifikasi
      description: Mendapatkan daftar notifikasi user
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            example: 1
          description: Nomor halaman
        - in: query
          name: limit
          schema:
            type: integer
            example: 10
          description: Jumlah item per halaman
        - in: query
          name: isRead
          schema:
            type: boolean
          description: Filter berdasarkan status dibaca
      responses:
        '200':
          description: Daftar notifikasi berhasil didapatkan
          content:
            application/json:
              schema:
                type: object
                properties:
                  notifications:
                    type: array
                    items:
                      $ref: '#/components/schemas/Notification'
                  total:
                    type: integer
                  page:
                    type: integer
                  totalPages:
                    type: integer
        '401':
          description: Tidak terautentikasi

  /notifications/{notificationId}:
    put:
      tags:
        - Notifications
      summary: Update status notifikasi
      description: Menandai notifikasi sebagai telah dibaca
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: notificationId
          required: true
          schema:
            type: string
            format: uuid
          description: ID notifikasi
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - isRead
              properties:
                isRead:
                  type: boolean
                  example: true
      responses:
        '200':
          description: Status notifikasi berhasil diupdate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
        '401':
          description: Tidak terautentikasi
        '404':
          description: Notifikasi tidak ditemukan

  # Rating & Review Endpoints
  /events/{eventId}/ratings:
    get:
      tags:
        - Ratings
      summary: Mendapatkan daftar rating
      description: Mendapatkan daftar rating untuk event
      parameters:
        - in: path
          name: eventId
          required: true
          schema:
            type: string
            format: uuid
          description: ID event
        - in: query
          name: page
          schema:
            type: integer
            example: 1
          description: Nomor halaman
        - in: query
          name: limit
          schema:
            type: integer
            example: 10
          description: Jumlah item per halaman
      responses:
        '200':
          description: Daftar rating berhasil didapatkan
          content:
            application/json:
              schema:
                type: object
                properties:
                  ratings:
                    type: array
                    items:
                      $ref: '#/components/schemas/Rating'
                  total:
                    type: integer
                  page:
                    type: integer
                  totalPages:
                    type: integer
        '404':
          description: Event tidak ditemukan

    post:
      tags:
        - Ratings
      summary: Menambahkan rating
      description: Menambahkan rating dan review untuk event
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: eventId
          required: true
          schema:
            type: string
            format: uuid
          description: ID event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - rating
              properties:
                rating:
                  type: number
                  minimum: 1
                  maximum: 5
                  example: 5
                review:
                  type: string
                  example: "Event yang sangat bagus!"
      responses:
        '201':
          description: Rating berhasil ditambahkan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rating'
        '401':
          description: Tidak terautentikasi
        '404':
          description: Event tidak ditemukan

  # Comment Endpoints
  /events/{eventId}/comments:
    get:
      tags:
        - Comments
      summary: Mendapatkan daftar komentar
      description: Mendapatkan daftar komentar untuk event
      parameters:
        - in: path
          name: eventId
          required: true
          schema:
            type: string
            format: uuid
          description: ID event
        - in: query
          name: page
          schema:
            type: integer
            example: 1
          description: Nomor halaman
        - in: query
          name: limit
          schema:
            type: integer
            example: 10
          description: Jumlah item per halaman
      responses:
        '200':
          description: Daftar komentar berhasil didapatkan
          content:
            application/json:
              schema:
                type: object
                properties:
                  comments:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
                  total:
                    type: integer
                  page:
                    type: integer
                  totalPages:
                    type: integer
        '404':
          description: Event tidak ditemukan

    post:
      tags:
        - Comments
      summary: Menambahkan komentar
      description: Menambahkan komentar untuk event
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: eventId
          required: true
          schema:
            type: string
            format: uuid
          description: ID event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
                  example: "Komentar saya tentang event ini..."
                parentId:
                  type: string
                  format: uuid
                  description: ID komentar induk (untuk balasan)
      responses:
        '201':
          description: Komentar berhasil ditambahkan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '401':
          description: Tidak terautentikasi
        '404':
          description: Event tidak ditemukan

  /comments/{commentId}:
    put:
      tags:
        - Comments
      summary: Update komentar
      description: Mengupdate komentar
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: commentId
          required: true
          schema:
            type: string
            format: uuid
          description: ID komentar
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
                  example: "Update komentar saya..."
      responses:
        '200':
          description: Komentar berhasil diupdate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '401':
          description: Tidak terautentikasi
        '403':
          description: Tidak memiliki akses
        '404':
          description: Komentar tidak ditemukan

    delete:
      tags:
        - Comments
      summary: Hapus komentar
      description: Menghapus komentar
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: commentId
          required: true
          schema:
            type: string
            format: uuid
          description: ID komentar
      responses:
        '200':
          description: Komentar berhasil dihapus
        '401':
          description: Tidak terautentikasi
        '403':
          description: Tidak memiliki akses
        '404':
          description: Komentar tidak ditemukan

  # Feedback Endpoints
  /feedback:
    post:
      tags:
        - Feedback
      summary: Mengirim feedback
      description: Mengirim feedback untuk platform
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - type
                - message
              properties:
                type:
                  type: string
                  enum: [bug, feature, complaint, suggestion]
                  example: "feature"
                message:
                  type: string
                  example: "Saya ingin fitur baru..."
                category:
                  type: string
                  example: "UI/UX"
                priority:
                  type: string
                  enum: [low, medium, high]
                  example: "medium"
      responses:
        '201':
          description: Feedback berhasil dikirim
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feedback'
        '401':
          description: Tidak terautentikasi

  # Admin Endpoints
  /admin/events:
    get:
      tags:
        - Admin
      summary: Mendapatkan semua event
      description: Mendapatkan daftar semua event (untuk admin)
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            example: 1
          description: Nomor halaman
        - in: query
          name: limit
          schema:
            type: integer
            example: 10
          description: Jumlah item per halaman
        - in: query
          name: status
          schema:
            type: string
            enum: [draft, published, cancelled, completed]
          description: Filter berdasarkan status
      responses:
        '200':
          description: Daftar event berhasil didapatkan
          content:
            application/json:
              schema:
                type: object
                properties:
                  events:
                    type: array
                    items:
                      $ref: '#/components/schemas/Event'
                  total:
                    type: integer
                  page:
                    type: integer
                  totalPages:
                    type: integer
        '401':
          description: Tidak terautentikasi
        '403':
          description: Tidak memiliki akses

  /admin/transactions:
    get:
      tags:
        - Admin
      summary: Mendapatkan semua transaksi
      description: Mendapatkan daftar semua transaksi (untuk admin)
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            example: 1
          description: Nomor halaman
        - in: query
          name: limit
          schema:
            type: integer
            example: 10
          description: Jumlah item per halaman
        - in: query
          name: status
          schema:
            type: string
            enum: [pending, paid, cancelled, expired]
          description: Filter berdasarkan status
      responses:
        '200':
          description: Daftar transaksi berhasil didapatkan
          content:
            application/json:
              schema:
                type: object
                properties:
                  transactions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Transaction'
                  total:
                    type: integer
                  page:
                    type: integer
                  totalPages:
                    type: integer
        '401':
          description: Tidak terautentikasi
        '403':
          description: Tidak memiliki akses

  /admin/feedback:
    get:
      tags:
        - Admin
      summary: Mendapatkan semua feedback
      description: Mendapatkan daftar semua feedback (untuk admin)
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            example: 1
          description: Nomor halaman
        - in: query
          name: limit
          schema:
            type: integer
            example: 10
          description: Jumlah item per halaman
        - in: query
          name: status
          schema:
            type: string
            enum: [pending, in_progress, resolved, rejected]
          description: Filter berdasarkan status
      responses:
        '200':
          description: Daftar feedback berhasil didapatkan
          content:
            application/json:
              schema:
                type: object
                properties:
                  feedback:
                    type: array
                    items:
                      $ref: '#/components/schemas/Feedback'
                  total:
                    type: integer
                  page:
                    type: integer
                  totalPages:
                    type: integer
        '401':
          description: Tidak terautentikasi
        '403':
          description: Tidak memiliki akses

    put:
      tags:
        - Admin
      summary: Update status feedback
      description: Mengupdate status feedback (untuk admin)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: feedbackId
          required: true
          schema:
            type: string
            format: uuid
          description: ID feedback
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [pending, in_progress, resolved, rejected]
                  example: "resolved"
      responses:
        '200':
          description: Status feedback berhasil diupdate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feedback'
        '401':
          description: Tidak terautentikasi
        '403':
          description: Tidak memiliki akses
        '404':
          description: Feedback tidak ditemukan

  # Rating Endpoints
  /ratings:
    post:
      tags:
        - Ratings
      summary: Membuat rating baru
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - eventId
                - rating
                - comment
              properties:
                eventId:
                  type: string
                  format: uuid
                  description: ID event yang dirating
                rating:
                  type: number
                  minimum: 1
                  maximum: 5
                  description: Nilai rating (1-5)
                comment:
                  type: string
                  description: Komentar untuk rating
      responses:
        '201':
          description: Rating berhasil dibuat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rating'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /ratings/{ratingId}:
    parameters:
      - name: ratingId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    put:
      tags:
        - Ratings
      summary: Memperbarui rating
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: number
                  minimum: 1
                  maximum: 5
                comment:
                  type: string
      responses:
        '200':
          description: Rating berhasil diperbarui
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rating'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Ratings
      summary: Menghapus rating
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Rating berhasil dihapus
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # Shortlink Endpoints
  /shortlinks/info/{code}:
    parameters:
      - name: code
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Shortlinks
      summary: Mendapatkan informasi shortlink
      responses:
        '200':
          description: Informasi shortlink berhasil didapatkan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShortLink'
        '404':
          $ref: '#/components/responses/NotFound'

  /shortlinks/{code}:
    parameters:
      - name: code
        in: path
        required: true
        schema:
          type: string
    put:
      tags:
        - Shortlinks
      summary: Memperbarui shortlink
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                isActive:
                  type: boolean
                expiresAt:
                  type: string
                  format: date-time
                customUrl:
                  type: string
      responses:
        '200':
          description: Shortlink berhasil diperbarui
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShortLink'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Shortlinks
      summary: Menghapus shortlink
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Shortlink berhasil dihapus
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # Feedback Endpoints
  /feedback/{feedbackId}/status:
    parameters:
      - name: feedbackId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    put:
      tags:
        - Feedback
      summary: Memperbarui status feedback
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [pending, in_progress, resolved, closed]
      responses:
        '200':
          description: Status feedback berhasil diperbarui
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feedback'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /feedback/{feedbackId}/reply:
    parameters:
      - name: feedbackId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    post:
      tags:
        - Feedback
      summary: Membalas feedback
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - message
              properties:
                message:
                  type: string
      responses:
        '200':
          description: Balasan feedback berhasil ditambahkan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feedback'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  # Monitoring Endpoints
  /monitoring/health:
    get:
      tags:
        - Monitoring
      summary: Pengecekan kesehatan sistem
      responses:
        '200':
          description: Status kesehatan sistem
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [healthy, degraded, unhealthy]
                  timestamp:
                    type: string
                    format: date-time
                  services:
                    type: object
                    properties:
                      database:
                        type: string
                      redis:
                        type: string
                      storage:
                        type: string

  /monitoring/errors:
    get:
      tags:
        - Monitoring
      summary: Mendapatkan daftar error
      security:
        - bearerAuth: []
      parameters:
        - name: startDate
          in: query
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          schema:
            type: string
            format: date
        - name: level
          in: query
          schema:
            type: string
            enum: [error, warning, info]
      responses:
        '200':
          description: Daftar error berhasil didapatkan
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ErrorLog'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  # Abuse Report Endpoints
  /abuse-reports/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Abuse Reports
      summary: Mendapatkan detail laporan abuse
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Detail laporan abuse berhasil didapatkan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AbuseReport'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /abuse-reports/{id}/status:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    patch:
      tags:
        - Abuse Reports
      summary: Memperbarui status laporan abuse
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [pending, investigating, resolved, dismissed]
                notes:
                  type: string
      responses:
        '200':
          description: Status laporan abuse berhasil diperbarui
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AbuseReport'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  # Webhook Endpoints
  /webhooks:
    post:
      tags:
        - Webhooks
      summary: Membuat webhook subscription baru
      description: |
        Membuat subscription webhook baru
        
        Rate Limit: 5 requests per menit per user
        Validasi:
        - URL harus valid dan menggunakan HTTPS
        - Minimal 1 event type
        - Secret minimal 16 karakter
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - url
                - events
                - secret
              properties:
                url:
                  type: string
                  format: uri
                  example: "https://example.com/webhook"
                events:
                  type: array
                  items:
                    type: string
                  example: ["transaction.created", "event.updated"]
                secret:
                  type: string
                  minLength: 16
                  example: "your-webhook-secret-key"
      responses:
        '201':
          description: Webhook subscription berhasil dibuat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookSubscription'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'

  # WebSocket Endpoint
  /ws:
    get:
      tags:
        - WebSocket
      summary: Koneksi WebSocket
      description: |
        Endpoint untuk koneksi WebSocket
        
        Format pesan:
        ```json
        {
          "type": "notification",
          "data": {
            "title": "Notifikasi Baru",
            "message": "Pesan notifikasi"
          },
          "timestamp": "2024-03-01T10:00:00Z"
        }
        ```
        
        Event types:
        - notification: Notifikasi real-time
        - event_update: Update status event
        - ticket_status: Update status tiket
      security:
        - bearerAuth: []
      responses:
        '101':
          description: Switching Protocols
        '401':
          $ref: '#/components/responses/Unauthorized'

  # File Upload Endpoints
  /upload:
    post:
      tags:
        - File Upload
      summary: Upload file
      description: |
        Upload file (gambar, dokumen, dll)
        
        Rate Limit: 10 requests per menit per user
        Validasi:
        - Maksimal ukuran file: 5MB
        - Format yang didukung: jpg, jpeg, png, pdf, doc, docx
        - File harus valid dan tidak rusak
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                type:
                  type: string
                  enum: [image, document]
                  example: "image"
      responses:
        '201':
          description: File berhasil diupload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileUpload'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'

  # Analytics Endpoints
  /analytics:
    get:
      tags:
        - Analytics
      summary: Mendapatkan data analytics
      description: |
        Mendapatkan data analytics untuk periode tertentu
        
        Rate Limit: 30 requests per menit per user
        Validasi:
        - Periode harus valid
        - Start date harus sebelum end date
        - Maksimal range 1 tahun
      security:
        - bearerAuth: []
      parameters:
        - name: period
          in: query
          required: true
          schema:
            type: string
            enum: [daily, weekly, monthly, yearly]
          description: Periode waktu data
        - name: startDate
          in: query
          required: true
          schema:
            type: string
            format: date
          description: Tanggal mulai
        - name: endDate
          in: query
          required: true
          schema:
            type: string
            format: date
          description: Tanggal selesai
      responses:
        '200':
          description: Data analytics berhasil didapatkan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyticsData'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'

  # Staff Endpoints
  /staff/dashboard:
    get:
      tags:
        - Staff
      summary: Mendapatkan dashboard staff
      description: |
        Mendapatkan data dashboard untuk staff
        
        Rate Limit: 30 requests per menit per user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Data dashboard berhasil didapatkan
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalEvents:
                    type: integer
                    description: Total event yang ditangani
                  totalTickets:
                    type: integer
                    description: Total tiket yang divalidasi
                  recentValidations:
                    type: array
                    items:
                      type: object
                      properties:
                        ticketId:
                          type: string
                          format: uuid
                        eventName:
                          type: string
                        validatedAt:
                          type: string
                          format: date-time
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /staff/tickets/validate:
    post:
      tags:
        - Staff
      summary: Validasi tiket
      description: |
        Validasi tiket menggunakan QR code
        
        Rate Limit: 60 requests per menit per user
        Validasi:
        - QR code harus valid
        - Staff harus memiliki akses ke event
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - qrData
              properties:
                qrData:
                  type: string
                  description: Data QR code tiket
                scanLocation:
                  type: string
                  description: Lokasi scan tiket
      responses:
        '200':
          description: Tiket berhasil divalidasi
          content:
            application/json:
              schema:
                type: object
                properties:
                  isValid:
                    type: boolean
                  message:
                    type: string
                  ticket:
                    $ref: '#/components/schemas/Ticket'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /staff/tickets/stats/{eventId}:
    get:
      tags:
        - Staff
      summary: Mendapatkan statistik check-in event
      description: |
        Mendapatkan statistik check-in untuk event tertentu
        
        Rate Limit: 30 requests per menit per user
      security:
        - bearerAuth: []
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID event
      responses:
        '200':
          description: Statistik berhasil didapatkan
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalTickets:
                    type: integer
                  checkedIn:
                    type: integer
                  remaining:
                    type: integer
                  checkInRate:
                    type: number
                  lastCheckIn:
                    type: string
                    format: date-time
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  # Creator Payment Endpoints
  /creator-payments/events/{eventId}/request:
    post:
      tags:
        - Creator Payments
      summary: Membuat permintaan pembayaran
      description: |
        Membuat permintaan pembayaran untuk event
        
        Rate Limit: 5 requests per menit per user
      security:
        - bearerAuth: []
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID event
      responses:
        '201':
          description: Permintaan pembayaran berhasil dibuat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentRequest'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /creator-payments/history:
    get:
      tags:
        - Creator Payments
      summary: Mendapatkan riwayat pembayaran
      description: |
        Mendapatkan riwayat pembayaran creator
        
        Rate Limit: 30 requests per menit per user
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: Nomor halaman
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
          description: Jumlah item per halaman
      responses:
        '200':
          description: Riwayat pembayaran berhasil didapatkan
          content:
            application/json:
              schema:
                type: object
                properties:
                  payments:
                    type: array
                    items:
                      $ref: '#/components/schemas/PaymentRequest'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /creator-payments/pending:
    get:
      tags:
        - Creator Payments
      summary: Mendapatkan daftar pembayaran pending
      description: |
        Mendapatkan daftar pembayaran yang masih pending
        
        Rate Limit: 30 requests per menit per user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Daftar pembayaran pending berhasil didapatkan
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /creator-payments/{paymentId}/process:
    post:
      tags:
        - Creator Payments
      summary: Memproses pembayaran
      description: |
        Memproses pembayaran creator (admin only)
        
        Rate Limit: 10 requests per menit per user
      security:
        - bearerAuth: []
      parameters:
        - name: paymentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID pembayaran
      responses:
        '200':
          description: Pembayaran berhasil diproses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /creator-payments/{paymentId}/complete:
    post:
      tags:
        - Creator Payments
      summary: Menyelesaikan pembayaran
      description: |
        Menandai pembayaran sebagai selesai (admin only)
        
        Rate Limit: 10 requests per menit per user
      security:
        - bearerAuth: []
      parameters:
        - name: paymentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID pembayaran
      responses:
        '200':
          description: Pembayaran berhasil diselesaikan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /creator-payments/to-process:
    get:
      tags:
        - Creator Payments
      summary: Mendapatkan daftar pembayaran yang perlu diproses
      description: |
        Mendapatkan daftar pembayaran yang perlu diproses (admin only)
        
        Rate Limit: 30 requests per menit per user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Daftar pembayaran berhasil didapatkan
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  # Social Share Endpoints
  /social-share/events/{eventId}/share:
    post:
      tags:
        - Social Share
      summary: Membuat share link untuk event
      description: |
        Membuat link berbagi untuk event
        
        Rate Limit: 10 requests per menit per user
      security:
        - bearerAuth: []
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID event
      responses:
        '201':
          description: Share link berhasil dibuat
          content:
            application/json:
              schema:
                type: object
                properties:
                  shareId:
                    type: string
                    format: uuid
                  shortLink:
                    type: string
                    format: uri
                  referralCode:
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /social-share/events/{eventId}/share-links:
    get:
      tags:
        - Social Share
      summary: Mendapatkan daftar share link event
      description: |
        Mendapatkan daftar share link untuk event
        
        Rate Limit: 30 requests per menit per user
      security:
        - bearerAuth: []
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID event
      responses:
        '200':
          description: Daftar share link berhasil didapatkan
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    shareId:
                      type: string
                      format: uuid
                    shortLink:
                      type: string
                      format: uri
                    referralCode:
                      type: string
                    createdAt:
                      type: string
                      format: date-time
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /social-share/events/{eventId}/shares:
    get:
      tags:
        - Social Share
      summary: Mendapatkan statistik share event
      description: |
        Mendapatkan statistik share untuk event (creator only)
        
        Rate Limit: 30 requests per menit per user
      security:
        - bearerAuth: []
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID event
      responses:
        '200':
          description: Statistik share berhasil didapatkan
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalShares:
                    type: integer
                  totalClicks:
                    type: integer
                  conversionRate:
                    type: number
                  sharesByPlatform:
                    type: object
                    additionalProperties:
                      type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /social-share/events/{eventId}/shares/statistics:
    get:
      tags:
        - Social Share
      summary: Mendapatkan statistik detail share event
      description: |
        Mendapatkan statistik detail share untuk event (creator only)
        
        Rate Limit: 30 requests per menit per user
      security:
        - bearerAuth: []
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID event
        - name: startDate
          in: query
          schema:
            type: string
            format: date
          description: Tanggal mulai
        - name: endDate
          in: query
          schema:
            type: string
            format: date
          description: Tanggal selesai
      responses:
        '200':
          description: Statistik detail berhasil didapatkan
          content:
            application/json:
              schema:
                type: object
                properties:
                  dailyStats:
                    type: array
                    items:
                      type: object
                      properties:
                        date:
                          type: string
                          format: date
                        shares:
                          type: integer
                        clicks:
                          type: integer
                        conversions:
                          type: integer
                  platformStats:
                    type: object
                    additionalProperties:
                      type: object
                      properties:
                        shares:
                          type: integer
                        clicks:
                          type: integer
                        conversionRate:
                          type: number
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /social-share/user/shares:
    get:
      tags:
        - Social Share
      summary: Mendapatkan daftar share user
      description: |
        Mendapatkan daftar share yang dibuat oleh user
        
        Rate Limit: 30 requests per menit per user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Daftar share berhasil didapatkan
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    shareId:
                      type: string
                      format: uuid
                    eventId:
                      type: string
                      format: uuid
                    eventName:
                      type: string
                    shortLink:
                      type: string
                      format: uri
                    referralCode:
                      type: string
                    clicks:
                      type: integer
                    createdAt:
                      type: string
                      format: date-time
        '401':
          $ref: '#/components/responses/Unauthorized'

  /social-share/track-share/{referralCode}:
    get:
      tags:
        - Social Share
      summary: Melacak klik share link
      description: |
        Melacak klik pada share link
        
        Rate Limit: 60 requests per menit per IP
      parameters:
        - name: referralCode
          in: path
          required: true
          schema:
            type: string
          description: Kode referral
      responses:
        '200':
          description: Klik berhasil dilacak
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '404':
          $ref: '#/components/responses/NotFound' 

  # Creator Follow Endpoints
  /creators/{creatorId}/follow:
    post:
      tags:
        - Creator Follow
      summary: Follow creator
      description: |
        Mengikuti creator
        
        Rate Limit: 10 requests per menit per user
      security:
        - bearerAuth: []
      parameters:
        - name: creatorId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID creator
      responses:
        '201':
          description: Berhasil follow creator
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatorFollow'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Creator Follow
      summary: Unfollow creator
      description: |
        Berhenti mengikuti creator
        
        Rate Limit: 10 requests per menit per user
      security:
        - bearerAuth: []
      parameters:
        - name: creatorId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID creator
      responses:
        '200':
          description: Berhasil unfollow creator
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /creators/{creatorId}/followers:
    get:
      tags:
        - Creator Follow
      summary: Mendapatkan daftar followers
      description: |
        Mendapatkan daftar followers creator
        
        Rate Limit: 30 requests per menit per user
      security:
        - bearerAuth: []
      parameters:
        - name: creatorId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID creator
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: Nomor halaman
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
          description: Jumlah item per halaman
      responses:
        '200':
          description: Daftar followers berhasil didapatkan
          content:
            application/json:
              schema:
                type: object
                properties:
                  followers:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /creators/{creatorId}/follow-status:
    get:
      tags:
        - Creator Follow
      summary: Mendapatkan status follow
      description: |
        Mendapatkan status follow creator oleh user yang sedang login
        
        Rate Limit: 30 requests per menit per user
      security:
        - bearerAuth: []
      parameters:
        - name: creatorId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID creator
      responses:
        '200':
          description: Status follow berhasil didapatkan
          content:
            application/json:
              schema:
                type: object
                properties:
                  isFollowing:
                    type: boolean
                  notificationsEnabled:
                    type: boolean
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /creators/{creatorId}/notifications:
    put:
      tags:
        - Creator Follow
      summary: Update pengaturan notifikasi
      description: |
        Mengupdate pengaturan notifikasi untuk creator yang di-follow
        
        Rate Limit: 10 requests per menit per user
      security:
        - bearerAuth: []
      parameters:
        - name: creatorId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID creator
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - notificationsEnabled
              properties:
                notificationsEnabled:
                  type: boolean
                  description: Status notifikasi
      responses:
        '200':
          description: Pengaturan notifikasi berhasil diupdate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatorFollow'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /user/following:
    get:
      tags:
        - Creator Follow
      summary: Mendapatkan daftar creator yang di-follow
      description: |
        Mendapatkan daftar creator yang di-follow oleh user yang sedang login
        
        Rate Limit: 30 requests per menit per user
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: Nomor halaman
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
          description: Jumlah item per halaman
      responses:
        '200':
          description: Daftar creator berhasil didapatkan
          content:
            application/json:
              schema:
                type: object
                properties:
                  creators:
                    type: array
                    items:
                      $ref: '#/components/schemas/Creator'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /creators/top:
    get:
      tags:
        - Creator Follow
      summary: Mendapatkan daftar creator terpopuler
      description: |
        Mendapatkan daftar creator dengan followers terbanyak
        
        Rate Limit: 30 requests per menit per IP
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
            maximum: 50
          description: Jumlah creator yang ditampilkan
      responses:
        '200':
          description: Daftar creator berhasil didapatkan
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Creator'

  /creators/suggested:
    get:
      tags:
        - Creator Follow
      summary: Mendapatkan saran creator
      description: |
        Mendapatkan saran creator berdasarkan minat user
        
        Rate Limit: 30 requests per menit per user
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
            maximum: 50
          description: Jumlah saran yang ditampilkan
      responses:
        '200':
          description: Daftar saran berhasil didapatkan
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Creator'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # Payment History Endpoint
  /payments/history:
    get:
      tags:
        - Payments
      summary: Mendapatkan riwayat pembayaran
      description: |
        Mendapatkan riwayat pembayaran user
        
        Rate Limit: 30 requests per menit per user
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: Nomor halaman
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
          description: Jumlah item per halaman
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, success, failed]
          description: Filter berdasarkan status
      responses:
        '200':
          description: Riwayat pembayaran berhasil didapatkan
          content:
            application/json:
              schema:
                type: object
                properties:
                  payments:
                    type: array
                    items:
                      $ref: '#/components/schemas/Transaction'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'